{% set build_num = ctng_gcc_build_number %}

package:
  name: ctng-compilers
  version: {{ ctng_gcc }}

source:
  path: .

build:
  merge_build_host: False
  # defined in conda_build_config.yaml so that we can keep it associated with a particular GCC version number
  number: {{ build_num | default(0) }}
  skip: True  # [not linux]
  # The CentOS6 system libraries should be used for everything here.
  # We do not have CDT packages yet, nor compilers that would use them!
  missing_dso_whitelist:
    - "*"

requirements:
  build:
    - crosstool-ng >=1.24.0,<1.25
    - bash  # [osx]
    - autoconf  # [linux64]
    - automake  # [linux64]
  # Need something here so that build does not get installed to a long prefix
  # as that breaks on some systems.
  host:
    - crosstool-ng >=1.24.0,<1.25

outputs:
  - name: gcc_impl_{{ ctng_target_platform }}
    script: install-gcc.sh
    build:
      number: {{ build_num }}
      detect_binary_files_with_prefix: False
      binary_relocation:
        - 'bin/*'
        - 'lib/*.so*'
        - 'libexec/**/*.so*'
        - 'libexec/**/cc1*'
        - 'libexec/**/collect2'
        - 'libexec/**/gcc'
        - 'libexec/**/lto*'
        - 'libexec/**/plugin/gengtype'
      missing_dso_whitelist:
        - '*'
      runpath_whitelist:
        - "x86_64-{{ ctng_vendor }}-linux-gnu/sysroot/lib/libpthread-2.12.2.so"
      ignore_run_exports:
        - __glibc
    requirements:
      host:
        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }} {{ ctng_vendor }}_variant_*
        - {{ pin_subpackage("libgomp", exact=True) }}
        - {{ pin_subpackage("libstdcxx-ng", exact=True) }}
        - {{ pin_subpackage("libgcc-ng", exact=True) }}
        - {{ pin_subpackage("libgfortran-ng") }}
      run:
        - {{ pin_subpackage("binutils_impl_" ~ ctng_target_platform, max_pin=None) }}
        # libstdcxx-ng is a runtime dep of gcc because LTO requires it.
        - {{ pin_subpackage("libstdcxx-ng", max_pin=None) }}
        - {{ pin_subpackage("libgcc-ng", max_pin=None) }}
        - {{ pin_subpackage("libgomp", max_pin=None) }}
        - sysroot_{{ ctng_target_platform }}
    run_exports:
      # impose this requirement across the build/host boundary
      strong:
        - {{ pin_subpackage("libgcc-ng", max_pin=None) }}
    test:
      requires:
        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }} {{ runtime_ctng_vendor }}_variant_*
      files:
        - tests
      commands:
        - test -f ${PREFIX}/{{ ctng_cpu_arch }}-{{ ctng_vendor }}-linux-gnu/sysroot/lib/libgomp.so
        - test `readlink ${PREFIX}/{{ ctng_cpu_arch }}-{{ ctng_vendor }}-linux-gnu/sysroot/lib/libgomp.so` == "../../../lib/libgomp.so"
        - test -f ${PREFIX}/bin/{{ ctng_cpu_arch }}-conda_cos6-linux-gnu-gcc  # [x86_64]
        - test -f ${PREFIX}/bin/{{ ctng_cpu_arch }}-conda_cos7-linux-gnu-gcc  # [not x86_64]
        - CC=$(${PREFIX}/bin/*-gcc -dumpmachine)-gcc
        - ${CC} -Wall tests/aligned_alloc.c -o c_aligned -v
        - ./c_aligned
    about:
      summary: GNU C Compiler
      home: https://gcc.gnu.org/
      license: GPL-3.0-with-GCC-exception

  - name: gxx_impl_{{ ctng_target_platform }}
    script: install-g++.sh
    build:
      number: {{ build_num }}
      detect_binary_files_with_prefix: False
      binary_relocation:
        - 'bin/*'
        - 'lib/*.so'
        - 'libexec/**/*.so*'
        - 'libexec/**/cc1*'
      missing_dso_whitelist:
        - "*"
      ignore_run_exports:
        - __glibc
    requirements:
      build:
        # For cpp and crt{i,n}.o
        - {{ pin_subpackage("gcc_impl_" ~ ctng_target_platform, exact=True) }}
        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }} {{ ctng_vendor }}_variant_*
      host:
        # For cpp and crt{i,n}.o
        - {{ pin_subpackage("gcc_impl_" ~ ctng_target_platform, exact=True) }}
        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }} {{ ctng_vendor }}_variant_*
      run:
        # For cpp and crt{i,n}.o
        - {{ pin_subpackage("gcc_impl_" ~ ctng_target_platform, exact=True) }}
    run_exports:
      # impose this requirement across the build/host boundary
      strong:
        - {{ pin_subpackage("libstdcxx-ng", max_pin=None) }}
    test:
      requires:
        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }} {{ runtime_ctng_vendor }}_variant_*
      files:
        - tests
      commands:
        - test -f ${PREFIX}/bin/{{ ctng_cpu_arch }}-conda_cos6-linux-gnu-g++  # [x86_64]
        - test -f ${PREFIX}/bin/{{ ctng_cpu_arch }}-conda_cos7-linux-gnu-g++  # [not x86_64]
        - CXX=$(${PREFIX}/bin/*-gcc -dumpmachine)-g++
        - ${CXX} -Wall tests/aligned_alloc.cpp -o cpp_aligned --std=c++17
        - ./cpp_aligned
    about:
      summary: GNU C++ Compiler
      home: https://gcc.gnu.org/
      license: GPL-3.0-with-GCC-exception

  - name: gfortran_impl_{{ ctng_target_platform }}
    script: install-gfortran.sh
    build:
      number: {{ build_num }}
      detect_binary_files_with_prefix: False
      binary_relocation:
        - 'bin/*'
        - 'lib/*.so'
        - 'libexec/**/*.so*'
        - 'libexec/**/f951'
      missing_dso_whitelist:
        - "*"
      ignore_run_exports:
        - __glibc
    requirements:
      build:
        # For cpp and crt{i,n}.o
        - {{ pin_subpackage("gcc_impl_" ~ ctng_target_platform, exact=True) }}
        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }} {{ ctng_vendor }}_variant_*
      host:
        - {{ pin_subpackage("gcc_impl_" ~ ctng_target_platform, exact=True) }}
        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }} {{ ctng_vendor }}_variant_*
      run:
        # For cpp and crt{i,n}.o
        - gcc_impl_{{ ctng_target_platform }} >=7.2.0
        - {{ pin_subpackage("libgfortran-ng") }}
        - {{ pin_subpackage("libgcc-ng", max_pin=None) }}
    run_exports:
      # impose this requirement across the build/host boundary
      strong:
        - {{ pin_subpackage("libgfortran-ng") }}
        - {{ pin_subpackage("libgcc-ng", max_pin=None) }}
    test:
      requires:
        - cmake >=3.11
        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }} {{ runtime_ctng_vendor }}_variant_*
      commands:
        - test -f ${PREFIX}/bin/{{ ctng_cpu_arch }}-conda_cos6-linux-gnu-gfortran  # [x86_64]
        - test -f ${PREFIX}/bin/{{ ctng_cpu_arch }}-conda_cos7-linux-gnu-gfortran  # [not x86_64]
        - find $PREFIX/lib -iname omp_lib.mod | grep '.'
        - find $PREFIX/lib -iname omp_lib.h | grep '.'
        - pushd tests/fortomp
        - sh test_fort.sh
      files:
        - tests/fortomp/*
    about:
      summary: GNU Fortran Compiler
      home: https://gcc.gnu.org/
      license: GPL-3.0-with-GCC-exception

  - name: binutils_impl_{{ ctng_target_platform }}
    version: "{{ ctng_binutils }}"
    script: install-binutils.sh
    build:
      number: {{ build_num }}
      detect_binary_files_with_prefix: False
      binary_relocation:
        - 'bin/*'
        - 'lib/*.so'
        - 'libexec/**/*.so*'
      missing_dso_whitelist:
        - "*"
    requirements:
      run_constrained:
        - gcc_impl_{{ ctng_target_platform }} {{ ctng_gcc }}.*
        - gfortran_impl_{{ ctng_target_platform }} {{ ctng_gcc }}.*
    test:
      commands:
        - test -f ${PREFIX}/{{ ctng_cpu_arch }}*/bin/ar
        - test -f ${PREFIX}/{{ ctng_cpu_arch }}*/bin/ld
        - test -f ${PREFIX}/bin/{{ ctng_cpu_arch }}-conda_cos6-linux-gnu-ar  # [x86_64]
        - test -f ${PREFIX}/bin/{{ ctng_cpu_arch }}-conda_cos7-linux-gnu-ar  # [not x86_64]
        - test -f ${PREFIX}/bin/{{ ctng_cpu_arch }}-conda_cos6-linux-gnu-ld  # [x86_64]
        - test -f ${PREFIX}/bin/{{ ctng_cpu_arch }}-conda_cos7-linux-gnu-ld  # [not x86_64]
    about:
      summary: The GNU Binutils are a collection of binary tools.
      home: https://www.gnu.org/software/binutils/
      license: GPL-3.0-or-later

  - name: libstdcxx-ng
    target: {{ ctng_target_platform }}
    script: install-libstdc++.sh
    build:
      number: {{ build_num }}
      detect_binary_files_with_prefix: False
      binary_relocation: False
      missing_dso_whitelist:
        - "*"
      ignore_run_exports:
        - __glibc
    requirements:
      host:
        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }} {{ ctng_vendor }}_variant_*
    test:
      commands:
        - test -f ${PREFIX}/lib/libstdc++.so
    about:
      summary: The GNU C++ Runtime Library
      home: https://gcc.gnu.org/
      license: GPL-3.0-with-GCC-exception

  - name: libgcc-ng
    target: {{ ctng_target_platform }}
    script: install-libgcc-no-gomp.sh
    requirements:
      host:
        - {{ pin_subpackage("libgomp", exact=True) }}
        - {{ pin_subpackage('_openmp_mutex', exact=True) }}
        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }} {{ ctng_vendor }}_variant_*
      run:
        - _libgcc_mutex {{ _libgcc_mutex }}  # [linux64 or ppc64le]
        - {{ pin_subpackage("_openmp_mutex", max_pin=None) }}
      run_constrained:
        - {{ pin_subpackage("libgomp", exact=True) }}
    build:
      number: {{ build_num }}
      detect_binary_files_with_prefix: False
      binary_relocation: False
      missing_dso_whitelist:
        - "*"
      ignore_run_exports:
        - __glibc
    test:
      commands:
        - test -f ${PREFIX}/lib/libgcc_s.so
        - test -f ${PREFIX}/lib/libgomp.so.{{ libgomp_ver[0:1] }}
        - test `readlink ${PREFIX}/lib/libgomp.so.{{ libgomp_ver[0:1] }}` == "libgomp.so.{{ libgomp_ver }}"
    about:
      summary: The GCC low-level runtime library
      home: https://gcc.gnu.org/onlinedocs/gccint/Libgcc.html
      license: GPL

  - name: libgomp
    target: {{ ctng_target_platform }}
    script: install-libgomp.sh
    requirements:
      host:
        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }} {{ ctng_vendor }}_variant_*
      run:
        - _libgcc_mutex {{ _libgcc_mutex }}  # [linux64 or ppc64le]
    build:
      number: {{ build_num }}
      detect_binary_files_with_prefix: False
      binary_relocation: False
      missing_dso_whitelist:
        - "*"
      run_exports:
        strong:
          - {{ pin_subpackage("_openmp_mutex", max_pin=None) }}
      ignore_run_exports:
        - __glibc
    test:
      commands:
        - test -f ${PREFIX}/lib/libgomp.so.{{ libgomp_ver }}
        - test ! -f ${PREFIX}/lib/libgomp.so
        - test ! -f ${PREFIX}/lib/libgomp.so.{{ libgomp_ver[0:1] }}
    about:
      summary: The GCC OpenMP implementation.
      home: https://gcc.gnu.org/onlinedocs/gccint/Libgcc.html
      license: GPL

  - name: _openmp_mutex
    script: install-openmp_impl.sh
    version: {{ openmp_ver }}
    requirements:
      host:
        - {{ pin_subpackage('libgomp', exact=True) }}
      run:
        - _libgcc_mutex {{ _libgcc_mutex }}  # [linux64 or ppc64le]
        - {{ pin_subpackage("libgomp", max_pin=None) }}
      run_constrained:
        # conflict with previous name
        - openmp_impl 9999
    build:
      string: 0_gnu
      run_exports:
        strong:
          - {{ pin_subpackage("_openmp_mutex", max_pin=None) }}
    test:
      commands:
        - test -f ${PREFIX}/lib/libgomp.so.{{ libgomp_ver[0:1] }}
        - test `readlink ${PREFIX}/lib/libgomp.so.{{ libgomp_ver[0:1] }}` == "libgomp.so.{{ libgomp_ver }}"
    about:
      summary: OpenMP Implementation Mutex
      license: BSD-3-Clause
      license_file: LICENSE
      home: https://github.com/conda-forge/ctng-compilers-feedstock

  - name: libgfortran-ng
    target: {{ ctng_target_platform }}
    script: install-libgfortran.sh
    build:
      number: {{ build_num }}
      detect_binary_files_with_prefix: False
      binary_relocation: False
      missing_dso_whitelist:
        - "*"
      ignore_run_exports:
        - __glibc
    requirements:
      host:
        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }} {{ ctng_vendor }}_variant_*
    test:
      commands:
        - test -f ${PREFIX}/lib/libgfortran.so
    about:
      summary: The GNU Fortran Runtime Library
      home: https://gcc.gnu.org/
      license: GPL-3.0-with-GCC-exception

  {% if ctng_gdb is defined %}
  - name: gdb_{{ ctng_target_platform }}
    target: {{ ctng_target_platform }}
    version: {{ ctng_gdb }}
    script: install-gdb.sh
    build:
      number: {{ build_num }}
      missing_dso_whitelist:
        - "*"
    about:
      summary: The GNU Project Debugger
      home: https://www.gnu.org/software/gdb/
      license: GPL
  {% endif %}

  {% if ctng_duma is defined %}
  - name: duma_{{ ctng_target_platform }}
    target: {{ ctng_target_platform }}
    version: {{ ctng_duma }}
    script: install-duma.sh
    build:
      number: {{ build_num }}
      detect_binary_files_with_prefix: False
      binary_relocation:
        - 'bin/*'
        - 'lib/*.so*'
        - 'libexec/**/*.so*'
      missing_dso_whitelist:
        - "*"
    about:
      summary: DUMA is an open-source library to detect buffer overruns and under-runs in C and C++ programs.
      home: http://duma.sourceforge.net/
      license: GPL
  {% endif %}

extra:
  recipe-maintainers:
    - isuruf
    - beckermr
